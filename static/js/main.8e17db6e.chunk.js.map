{"version":3,"sources":["logo.svg","components/GameBoardItem.js","components/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GameBoardItem","props","useState","value","style","height","width","overflow","position","transition","right","j","top","i","borderRadius","onClick","e","console","log","id","img","GameBoard","board","setBoard","rerender","setRerender","handleClick","path","swap","index1","index2","newPosX","newPosY","oldPosX","oldPosY","newItem1","key","image","img2","newItem2","tempboard","prev","useEffect","temp","tempStyle","count","length","margin","src","push","document","getElementById","addEventListener","removeEventListener","paddingBottom","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e17db6e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect, Component,useRef, useLayoutEffect } from \"react\";\r\n\r\nfunction GameBoardItem(props) {  \r\n    \r\n  const [value, setValue] = useState(props.value);\r\n  const clickImage=(e)=> {\r\n    console.log('clicked on ',props.value)\r\n\r\n  }\r\n  return (\r\n    <div style={{\r\n        height:'33%',width:'33%',overflow:'hidden',position:'absolute',transition:\"all 0.3s\",right:''+(100/3)*(2-props.j)+'%',top:''+(100/3)*(props.i)+'%',borderRadius:'10px'}}\r\n        onClick={e=>{clickImage(e)}}\r\n        id={props.id}>\r\n        {props.img}\r\n    </div>\r\n  );\r\n}\r\n// style={{\r\n//     height:'33%',width:'33%',overflow:'hidden',position:'absolute',transition:\"right 1s\",right:''+(100/3)*(2-props.j)+'%',top:''+(100/3)*(props.i)+'%',borderRadius:'10px'}}\r\nexport default GameBoardItem;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GameBoardItem from './GameBoardItem'\r\nfunction GameBoard(props) {\r\n\r\n    const [board, setBoard] = useState([]);\r\n    const [position,setPosition]=useState(8)\r\n    const [rerender,setRerender]=useState(true);\r\n    const [board2,setBoard2]=useState([])\r\n\r\n    const handleClick = (e) => {\r\n        if(e.path[1].id){\r\n            console.log('CLICKEDD LISTENRE',e.path[1].id)\r\n            swap(e.path[1].id,position)\r\n        }\r\n        console.log('board1', board)\r\n        // let tempboard=board;\r\n        // let img=<img style={{height:'300%',width:'300%',margin:'-'+(100*(0))+'%'+' 0px 0px -'+(100*(0))+'%'}} src={'https://i.imgur.com/YLWsY4G.jpg'}></img>\r\n        // let newItem1=<GameBoardItem id={0} key={0} img={img} value={0} i={2} j={2} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>\r\n        // // temp.pop();\r\n        // tempboard[0]=newItem1;\r\n        // setBoard(prev=>tempboard)\r\n        // let temppos=rerender;\r\n        // setRerender(!temppos)\r\n\r\n    }\r\n    const swap=(index1,index2)=>{\r\n        \r\n        \r\n        // let i=board[index1].props.i;\r\n        // let j=board[index1].props.j;\r\n        // let value=board[index1].props.value;\r\n        // let i2=board[index2].props.i;\r\n        // let j2=board[index2].props.j;\r\n        // let value2=board[index2].props.value;\r\n        // let newItem1=<GameBoardItem id={value} key={value} value={value} i={i} j={j} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>\r\n        // let newItem2=<GameBoardItem id={value2} key={value2} value={value2} i={i2} j={j2} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>\r\n        // let tempboard=board;\r\n        // tempboard[index1]=newItem2;\r\n        // tempboard[index2]=newItem1;\r\n        // setBoard(prev=>tempboard)\r\n        if(index1!=index2){\r\n            let newPosX = board[index1].props.i;\r\n            let newPosY = board[index1].props.j;\r\n            // console.log('X,Y:', newPosX, ',', newPosY)\r\n            let oldPosX = board[index2].props.i;\r\n            let oldPosY = board[index2].props.j;\r\n            console.log('index1:(',newPosX,newPosY,') pos:(',oldPosX,oldPosY,')')\r\n            if(newPosY==(oldPosY-1)&&oldPosX==newPosX){ //clicked above\r\n\r\n                let img=board[index1].props.img;\r\n                console.log('img is',img)\r\n                let newItem1=<GameBoardItem id={index1} key={index1} img={img} value={index1} i={board[index2].props.i} j={board[index2].props.j} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>\r\n                let img2=board[index2].props.img;\r\n                let newItem2=<GameBoardItem id={index2} key={index2} img={img2} value={index2} i={board[index1].props.i} j={board[index1].props.j} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>\r\n                \r\n                let tempboard=board;\r\n                // tempboard.pop();\r\n                tempboard[index1]=newItem1;\r\n                tempboard[index2]=newItem2;\r\n                setBoard(prev=>tempboard)\r\n                 let temppos=rerender;\r\n                setRerender(!temppos)\r\n            }\r\n            if(newPosY==(oldPosY+1)&&oldPosX==newPosX){ //clicked below\r\n\r\n                let img=board[index1].props.img;\r\n                console.log('img is',img)\r\n                let newItem1=<GameBoardItem id={index1} key={index1} img={img} value={index1} i={board[index2].props.i} j={board[index2].props.j} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>\r\n                let img2=board[index2].props.img;\r\n                let newItem2=<GameBoardItem id={index2} key={index2} img={img2} value={index2} i={board[index1].props.i} j={board[index1].props.j} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>\r\n                \r\n                let tempboard=board;\r\n                // tempboard.pop();\r\n                tempboard[index1]=newItem1;\r\n                tempboard[index2]=newItem2;\r\n                setBoard(prev=>tempboard)\r\n                 let temppos=rerender;\r\n                setRerender(!temppos)\r\n            }\r\n            if(newPosY==(oldPosY)&&oldPosX==(newPosX+1)){ //clicked below\r\n\r\n                let img=board[index1].props.img;\r\n                console.log('img is',img)\r\n                let newItem1=<GameBoardItem id={index1} key={index1} img={img} value={index1} i={board[index2].props.i} j={board[index2].props.j} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>\r\n                let img2=board[index2].props.img;\r\n                let newItem2=<GameBoardItem id={index2} key={index2} img={img2} value={index2} i={board[index1].props.i} j={board[index1].props.j} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>\r\n                \r\n                let tempboard=board;\r\n                // tempboard.pop();\r\n                tempboard[index1]=newItem1;\r\n                tempboard[index2]=newItem2;\r\n                setBoard(prev=>tempboard)\r\n                 let temppos=rerender;\r\n                setRerender(!temppos)\r\n            }\r\n            if(newPosY==(oldPosY)&&oldPosX==(newPosX-1)){ //clicked below\r\n\r\n                let img=board[index1].props.img;\r\n                console.log('img is',img)\r\n                let newItem1=<GameBoardItem id={index1} key={index1} img={img} value={index1} i={board[index2].props.i} j={board[index2].props.j} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>\r\n                let img2=board[index2].props.img;\r\n                let newItem2=<GameBoardItem id={index2} key={index2} img={img2} value={index2} i={board[index1].props.i} j={board[index1].props.j} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>\r\n                \r\n                let tempboard=board;\r\n                // tempboard.pop();\r\n                tempboard[index1]=newItem1;\r\n                tempboard[index2]=newItem2;\r\n                setBoard(prev=>tempboard)\r\n                 let temppos=rerender;\r\n                setRerender(!temppos)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('rereender')\r\n        let temp = [];\r\n        let tempStyle=[];\r\n        let count = 0;\r\n        if (board.length === 0) {\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    if ((i != 2) || (j != 2)) {\r\n                        console.log('count is', count)\r\n                        console.log('i,j', i, ' ', j)\r\n                        let img=<img style={{height:'300%',width:'300%',margin:'-'+(100*(i))+'%'+' 0px 0px -'+(100*(j))+'%'}} src={'https://i.imgur.com/YLWsY4G.jpg'}></img>\r\n                        temp.push(<GameBoardItem id={count} img={img} key={count} value={count} i={i} j={j} image={'https://i.imgur.com/YLWsY4G.jpg'}></GameBoardItem>)\r\n                        tempStyle.push({height:'33%',width:'33%',overflow:'hidden',position:'absolute',transition:\"right 1s\",right:''+(100/3)*(2-props.j)+'%',top:''+(100/3)*(props.i)+'%',borderRadius:'10px'})\r\n                    }\r\n                    else {\r\n                        console.log('else', i, j)\r\n                        temp.push(<GameBoardItem id={count} key={count} value={count} i={i} j={j} image={''}></GameBoardItem>)\r\n                        tempStyle.push({height:'33%',width:'33%',overflow:'hidden',position:'absolute',transition:\"right 1s\",right:''+(100/3)*(2-props.j)+'%',top:''+(100/3)*(props.i)+'%',borderRadius:'10px'})    \r\n                    }\r\n                    count++;\r\n                }\r\n            }\r\n            setBoard(prev => temp)\r\n            console.log('board is ', temp)\r\n        }\r\n        for (let i = 0; i < 3 * 3; i++) {\r\n            // console.log(document.getElementById(i),'testtest')\r\n            if (document.getElementById(i)) {\r\n                console.log('exist')\r\n                document.getElementById(i).addEventListener('click', handleClick)\r\n            }\r\n            else {\r\n                console.log('doesnt exist')\r\n            }\r\n        }\r\n        return () => {\r\n            for(let i=0;i<3*3;i++){\r\n                // console.log(document.getElementById(i),'testtest')\r\n                console.log('deleting')\r\n                if(document.getElementById(i)){\r\n                    // console.log('exist')\r\n                    document.getElementById(i).removeEventListener('click',handleClick)\r\n                }\r\n            }\r\n        };\r\n\r\n    }, [board,position,rerender]);\r\n    return (\r\n        <div style={{ height: '0', width: '40%', paddingBottom: '40%', position: 'relative' }}>\r\n            {board}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameBoard;\r\n","import React, { useState, useEffect, Component,useRef, useLayoutEffect } from \"react\";\nimport GameBoard from './components/GameBoard'\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {  \n    \n  const [board, setBoard] = useState([<div style={{height:''+800/3+'px',width:''+800/3+'px',overflow:'hidden'}}>\n    <img style={{}} src='https://i.imgur.com/YLWsY4G.jpg'></img>\n  </div>]);\n  const [test,setTest]=useState([{height:''+800/3+'px',width:''+800/3+'px',overflow:'hidden',position:'absolute',right:'0px',transition:\"right 1s\"},{height:''+800/3+'px',width:''+800/3+'px',overflow:'hidden',position:'absolute',right:''+800/3+'px',transition:\"right 1s\"}])\n   const setSomething=(e)=> {\n     console.log('test')\n     let temp=[...test]\n     let tempval=temp[0];\n     temp[0]=temp[1];\n     temp[1]=tempval;\n     setTest(prev=>temp)\n     console.log(temp)\n   }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <div style={{height:'800px',width:'800px',position:'relative'}}>\n          <div style={test[0]} onClick={e=>{setSomething(e)}}>\n            <img style={{}} src='https://i.imgur.com/YLWsY4G.jpg'></img>\n          </div>\n        <div style={test[1]}>\n          <img style={{margin:'0px 0px 0px -100%'}} src='https://i.imgur.com/YLWsY4G.jpg'></img>\n        </div>\n          </div> {/* game container*/}\n          {/* <img style={{height:'50vh'}} src='https://i.imgur.com/YLWsY4G.jpg'></img> */}\n          {/* alex */}\n          <GameBoard></GameBoard>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}